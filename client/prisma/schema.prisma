generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               Int      @id @default(autoincrement())
    firstName        String
    lastName         String?
    password         String
    role             Role
    passwordRequired Boolean
    createdAt        DateTime @default(now())

    groups Group[]
}

model Student {
    id        Int       @id @default(autoincrement())
    firstName String
    lastName  String?
    age       Int
    birthDate DateTime?
    phone     String?
    createdAt DateTime  @default(now())

    groups      StudentGroup[]
    attendances Attendance[]
    payments    Payment[]
}

model Group {
    id            Int        @id @default(autoincrement())
    name          String
    courseId      Int
    course        Course     @relation(fields: [courseId], references: [id])
    teacherId     Int
    teacher       User       @relation(fields: [teacherId], references: [id])
    type          GroupType?
    startDate     DateTime
    endDate       DateTime?
    time          String? // Stored as time-of-day in UTC (can use time type in raw SQL)
    backOfficeUrl String?
    lessonCount   Int?
    lessonPerWeek Int?
    createdAt     DateTime   @default(now())

    students StudentGroup[]
    lessons  Lesson[]
    payments Payment[]
}

model Course {
    id     Int     @id @default(autoincrement())
    name   String
    groups Group[]
}

model StudentGroup {
    student   Student @relation(fields: [studentId], references: [id])
    studentId Int
    group     Group   @relation(fields: [groupId], references: [id])
    groupId   Int

    @@id([studentId, groupId])
}

model Lesson {
    id        Int      @id @default(autoincrement())
    group     Group    @relation(fields: [groupId], references: [id])
    groupId   Int
    date      DateTime
    time      String?
    createdAt DateTime @default(now())

    attendance Attendance[]
}

model Attendance {
    id        Int              @id @default(autoincrement())
    lesson    Lesson           @relation(fields: [lessonId], references: [id])
    lessonId  Int
    student   Student          @relation(fields: [studentId], references: [id])
    studentId Int
    status    AttendanceStatus
    comment   String

    @@unique([studentId, lessonId])
}

model Payment {
    id          Int      @id @default(autoincrement())
    student     Student? @relation(fields: [studentId], references: [id], onDelete: SetNull)
    studentId   Int?
    group       Group?   @relation(fields: [groupId], references: [id], onDelete: SetNull)
    groupId     Int?
    lessonsPaid Int
    amount      Int?
    createdAt   DateTime @default(now())

    @@unique([studentId, groupId])
}

enum Role {
    ADMIN
    OWNER
    MANAGER
    TEACHER
}

enum GroupType {
    GROUP
    INDIVIDUAL
    INTENSIVE
}

enum AttendanceStatus {
    UNSPECIFIED
    PRESENT
    ABSENT
}
