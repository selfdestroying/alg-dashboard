generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  firstName        String
  lastName         String?
  password         String
  role             Role
  passwordRequired Boolean
  bidForLesson     Int             @default(1100)
  bidForIndividual Int             @default(750)
  createdAt        DateTime        @default(now())
  Group            Group[]
  groups           TeacherGroup[]
  lessons          TeacherLesson[]
}

model Student {
  id                  Int                  @id @default(autoincrement())
  firstName           String
  lastName            String?
  login               String
  password            String
  age                 Int
  birthDate           DateTime?
  parentsName         String?
  parentsPhone        String?
  crmUrl              String?
  createdAt           DateTime             @default(now())
  coins               Int                  @default(0)
  lessonsBalance      Int                  @default(0)
  totalLessons        Int                  @default(0)
  totalPayments       Int                  @default(0)
  attendances         Attendance[]
  Cart                Cart?
  Order               Order[]
  payments            Payment[]
  groups              StudentGroup[]
  unprocessedPayments UnprocessedPayment[]
}

model Group {
  id            Int            @id @default(autoincrement())
  name          String
  courseId      Int
  teacherId     Int
  type          GroupType?
  startDate     DateTime
  endDate       DateTime?
  time          String?
  createdAt     DateTime       @default(now())
  backOfficeUrl String?
  lessonCount   Int?
  lessonPerWeek Int?
  course        Course         @relation(fields: [courseId], references: [id])
  User          User           @relation(fields: [teacherId], references: [id])
  lessons       Lesson[]
  students      StudentGroup[]
  teachers      TeacherGroup[]
}

model Course {
  id     Int     @id @default(autoincrement())
  name   String
  groups Group[]
}

model StudentGroup {
  studentId Int
  groupId   Int
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([studentId, groupId])
}

model TeacherGroup {
  teacherId    Int
  groupId      Int
  group        Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  teacher      User  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  bidForLesson Int?

  @@id([teacherId, groupId])
}

model TeacherLesson {
  teacherId Int
  lessonId  Int
  lesson    Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@id([teacherId, lessonId])
}

model Lesson {
  id         Int             @id @default(autoincrement())
  groupId    Int
  date       DateTime
  time       String?
  createdAt  DateTime        @default(now())
  status     LessonStatus    @default(ACTIVE)
  attendance Attendance[]
  group      Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  teachers   TeacherLesson[]
}

model Attendance {
  id           Int              @id @default(autoincrement())
  lessonId     Int
  studentId    Int
  status       AttendanceStatus
  comment      String
  lesson       Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student      Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  asMakeupFor  MakeUp?          @relation("MakeUpAttendace")
  missedMakeup MakeUp?          @relation("MissedAttendance")

  @@unique([studentId, lessonId])
}

model MakeUp {
  id                 Int        @id @default(autoincrement())
  missedAttendanceId Int        @unique
  makeUpAttendaceId  Int        @unique
  makeUpAttendance   Attendance @relation("MakeUpAttendace", fields: [makeUpAttendaceId], references: [id], onDelete: Cascade)
  missedAttendance   Attendance @relation("MissedAttendance", fields: [missedAttendanceId], references: [id], onDelete: Cascade)
}

model Payment {
  id           Int      @id @default(autoincrement())
  studentId    Int
  createdAt    DateTime @default(now())
  lessonCount  Int      @default(0)
  price        Int      @default(0)
  bidForLesson Int      @default(0)
  leadName     String   @default("")
  productName  String   @default("")
  student      Student  @relation(fields: [studentId], references: [id])
}

model UnprocessedPayment {
  id        Int      @id @default(autoincrement())
  rawData   Json
  reason    String
  resolved  Boolean
  createdAt DateTime @default(now())
  studentId Int?
  student   Student? @relation(fields: [studentId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  studentId Int        @unique
  createdAt DateTime   @default(now())
  Student   Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  CartItem  CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  Cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Product Product[]
}

model Product {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  originalPrice Float?
  image         String     @default("placeholder.svg")
  categoryId    Int
  rating        Float      @default(0)
  reviews       Int        @default(0)
  popular       Boolean    @default(false)
  quantity      Int
  cartItem      CartItem[]
  order         Order[]
  category      Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Order {
  id        Int         @id @default(autoincrement())
  productId Int
  studentId Int
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  student   Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  OWNER
  MANAGER
  TEACHER
}

enum GroupType {
  GROUP
  INDIVIDUAL
  INTENSIVE
}

enum AttendanceStatus {
  UNSPECIFIED
  PRESENT
  ABSENT
}

enum OrderStatus {
  COMPLETED
  PENDING
  CANCELLED
}

enum LessonStatus {
  ACTIVE
  CANCELLED
}
